{"version":3,"sources":["logo.svg","Form/SIgnup.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SIgnup","useState","users","setUsers","useEffect","a","axios","get","headers","res","data","map","user","console","log","fetchUsers","name","email","password","info","setInfo","handleChange","e","target","value","handleSubmit","preventDefault","post","response","onSubmit","type","placeholder","onChange","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,yLCyF5BC,EAtFA,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,KAEnBC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACoBC,IAAMC,IAAI,kCAAmC,CAC7DC,QAAS,CAAE,eAAgB,sBAF/B,OAKc,QAJNC,EADR,SAMIA,EAAIC,KAAKA,KAAKC,KAAI,SAACC,GAAD,OAAUT,EAAS,GAAD,mBAAKD,GAAL,CAAYU,QAElDC,QAAQC,IAAIZ,GARd,4CADc,uBAAC,WAAD,wBAWda,KACC,CAACZ,IAde,MAgBKF,mBAAS,CAC/Be,KAAM,GACNC,MAAO,GACPC,SAAU,KAnBO,mBAgBZC,EAhBY,KAgBNC,EAhBM,KAsBbC,EAAe,SAACC,GACpBF,EAAQ,2BAAKD,GAAN,kBAAaG,EAAEC,OAAOP,KAAOM,EAAEC,OAAOC,UAGzCC,EAAY,uCAAG,WAAOH,GAAP,eAAAjB,EAAA,6DACnBiB,EAAEI,iBAEFb,QAAQC,IAAIK,GAHO,kBAMCb,IAAMqB,KAAK,yCAA0CR,EAAM,CAC3EX,QAAS,CAAE,eAAgB,sBAPZ,OAMXC,EANW,OAUjBI,QAAQC,IAAIL,GAVK,gDAYjBI,QAAQC,IAAI,KAAMc,UAZD,yDAAH,sDAgBlB,OACE,kBAAC,WAAD,KACE,0BAAMC,SAAUJ,GACd,2BACEK,KAAK,OACLC,YAAY,OACZf,KAAK,OACLQ,MAAOL,EAAKH,KACZgB,SAAUX,IAEZ,2BACES,KAAK,QACLC,YAAY,QACZf,KAAK,QACLQ,MAAOL,EAAKF,MACZe,SAAUX,IAEZ,2BACES,KAAK,WACLC,YAAY,cACZf,KAAK,WACLQ,MAAOL,EAAKD,SACZc,SAAUX,IAEZ,4BAAQS,KAAK,UAAb,WAGF,6BAEA,6BACE,oCAMC5B,EAAMS,KAAI,SAACC,GAAD,OACT,2BAAIA,EAAKI,YCrEJiB,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.8f6b2f37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, Fragment, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst SIgnup = () => {\r\n  const [users, setUsers] = useState([]);\r\n  useEffect(() => {\r\n    async function fetchUsers() {\r\n      const res = await axios.get(\"http://localhost:5000/api/users\", {\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n      // console.log(res);\r\n      if (res !== null) {\r\n        res.data.data.map((user) => setUsers([...users, user]));\r\n      }\r\n      console.log(users);\r\n    }\r\n    fetchUsers();\r\n  }, [setUsers]);\r\n\r\n  const [info, setInfo] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    setInfo({ ...info, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    console.log(info)\r\n\r\n    try {\r\n      const res = await axios.post(\"http://localhost:5000/api/users/signup\", info, {\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n\r\n      console.log(res);\r\n    } catch (error) {\r\n      console.log(error.response);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"name\"\r\n          name=\"name\"\r\n          value={info.name}\r\n          onChange={handleChange}\r\n        />\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"email\"\r\n          name=\"email\"\r\n          value={info.email}\r\n          onChange={handleChange}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"placeholder\"\r\n          name=\"password\"\r\n          value={info.password}\r\n          onChange={handleChange}\r\n        />\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n\r\n      <hr />\r\n\r\n      <div>\r\n        <p>Users</p>\r\n        {/* {users.length > 0 ? (\r\n          users.map((user) => <h1>{user.name}</h1>)\r\n        ) : (\r\n          <h1>No Users</h1>\r\n        )} */}\r\n        {users.map((user) => (\r\n          <p>{user.name}</p>\r\n        ))}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SIgnup;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport SIgnup from \"./Form/SIgnup\";\nimport Users from \"./Users/Users\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SIgnup />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}